from prody import *
import numpy as np
import matplotlib.pyplot as plt

#PDB="../TM3_TM8_CA_apo_mut.pdb"
#DCD="../TM3_TM8_CA_apo_mut.aligned.dcd"


################################################################################plotSqFlucts
def plotSqFlucts(modesarg,out_put='SqFlucts.pdf',resid_vec=None,xstep=1,legends=[],xlabel='resid',ylabel= 'Square fluctuations',title='pca',**kwargs):
	"""Show scaled square fluctuations using :func:`~matplotlib.pyplot.plot`.
	Modes or mode sets given as additional arguments will be scaled to have
	the same mean squared fluctuations as *modes*."""
        
	show=[]
	plt.xlabel(xlabel)
	plt.ylabel(ylabel)
	plt.title(title)
	i=0
	for modes in modesarg:
		sqf = calcSqFlucts(modes)
		if len(legends)>0:show.append(plt.plot( sqf,
		label=legends[i],**kwargs))
		else:show.append(plt.plot( sqf,label=str(modes),**kwargs))
		
		
		print(str(modes))
		i+=1
	
	if resid_vec!=None: xticks_labels=resid_vec[::xstep]
	else: xticks_labels=range(0,len(sqf),xstep)
	xticks_number=range(0,len(sqf),xstep)
	plt.xticks(xticks_number,xticks_labels,rotation=90)
        plt.legend()	
	plt.savefig(out_put)
################################################################################showOverlapTable
def myshowOverlapTable(modes_x, modes_y,out_put='OverlapTable.pdf', **kwargs):
    """Show overlap table using :func:`~matplotlib.pyplot.pcolor`.  *modes_x*
    and *modes_y* are sets of normal modes, and correspond to x and y axes of
    the plot.  Note that mode indices are incremented by 1.  List of modes
    is assumed to contain a set of contiguous modes from the same model.

    Default arguments for :func:`~matplotlib.pyplot.pcolor`:

      * ``cmap=plt.cm.jet``
      * ``norm=plt.normalize(0, 1)``"""
    
    import matplotlib.pyplot as plt
    
    overlap = abs(calcOverlap(modes_y, modes_x))
    print('fine to here')
    if overlap.ndim == 0:
        overlap = np.array([[overlap]])
    elif overlap.ndim == 1:
        overlap = overlap.reshape((modes_y.numModes(), modes_x.numModes()))

    #cmap = kwargs.pop('cmap', plt.cm.jet)
    #norm = kwargs.pop('norm', plt.normalize(0, 1))
    show = (plt.pcolor(overlap, cmap=plt.cm.jet, norm=plt.normalize(0, 1), **kwargs),
            plt.colorbar())
    x_range = np.arange(1, modes_x.numModes() + 1)
    plt.xticks(x_range-0.5, x_range)
    plt.xlabel(str(modes_x))
    y_range = np.arange(1, modes_y.numModes() + 1)
    plt.yticks(y_range-0.5, y_range)
    plt.ylabel(str(modes_y))
    plt.axis([0, modes_x.numModes(), 0, modes_y.numModes()])
    plt.savefig(out_put)


################################################################33


if __name__=='__main__':


	name="TM3-TM8"
	pca=loadModel(name+'.pca.npz')

	resid_vec=range(108,139)+range(403,434)
	legends=['pca1','pca2','pc3']

	plotSqFlucts((pca[:2],pca[1:2],pca[2:3]),out_put='first_three_pca.pdf',resid_vec=resid_vec,xstep=2,legends=legends)
